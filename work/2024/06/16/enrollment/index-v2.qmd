---
title: "Projecting Elementary and Secondary School Enrollment"
description: ""
date: 06-09-2024
date-modified: 06-09-2024
categories: []
image: images/preview-image.png
format:
  html:
    code-link: true
draft: true
comments:
  giscus:
    repo: baker-jr-john/baker-jr-john.github.io
---

## Introduction

According to the National Center for Education Statistics (NCES), total public and private elementary and secondary school enrollment was 56 million in fall 2019, representing a 3 percent increase since fall 2010. However, between fall 2019 and the first fall of the coronavirus pandemic in fall 2020, enrollment decreased 2 percent. From fall 2020 to fall 2030, enrollments are expected to decrease another 6 percent. Both public and private school enrollments are projected to be lower in 2030 than in 2019.

```{r}
#| echo: false
#| message: false

# Load necessary packages
library(readxl)
library(readr)
library(dplyr)
library(tidyr)
library(forecast)
library(zoo)
library(ggplot2)

# Load enrollment data
enrollment <- read_excel(
  "data/tabn203.10.xlsx",
  sheet = "Digest 2022 Table 203.10",
  range = "A4:U38",
  col_types = c(
    "text",  # Read Year as text to handle any non-numeric issues
    "skip",
    "skip",
    "numeric",
    "skip",
    "numeric",
    "numeric",
    "numeric",
    "numeric",
    "numeric",
    "numeric",
    "numeric",
    "numeric",
    "numeric",
    "numeric",
    "skip",
    "numeric",
    "numeric",
    "numeric",
    "numeric",
    "numeric"
  )
)

# Convert Year column to numeric, handling any non-numeric issues
enrollment <- enrollment %>%
  mutate(Year = as.numeric(gsub("[^0-9]", "", Year)))  # Remove any non-numeric characters and convert to numeric

# Check for any NAs introduced in the process
if(any(is.na(enrollment$Year))) {
  warning("Some years could not be converted to numeric. Please check the original data.")
}

# Rename columns
colnames(enrollment) <- c(
  "Year",
  "Prekindergarten",
  "Kindergarten",
  "First_grade",
  "Second_grade",
  "Third_grade",
  "Fourth_grade",
  "Fifth_grade",
  "Sixth_grade",
  "Seventh_grade",
  "Eighth_grade",
  "Elementary_ungraded",
  "Ninth_grade",
  "Tenth_grade",
  "Eleventh_grade",
  "Twelfth_grade",
  "Secondary_ungraded"
)

# Calculate historical grade progression rates
progression_rates <- enrollment %>%
  mutate(
    R_1 = First_grade / lag(Kindergarten),
    R_2 = Second_grade / lag(First_grade),
    R_3 = Third_grade / lag(Second_grade),
    R_4 = Fourth_grade / lag(Third_grade),
    R_5 = Fifth_grade / lag(Fourth_grade),
    R_6 = Sixth_grade / lag(Fifth_grade),
    R_7 = Seventh_grade / lag(Sixth_grade),
    R_8 = Eighth_grade / lag(Seventh_grade),
    R_9 = Ninth_grade / lag(Eighth_grade),
    R_10 = Tenth_grade / lag(Ninth_grade),
    R_11 = Eleventh_grade / lag(Tenth_grade),
    R_12 = Twelfth_grade / lag(Eleventh_grade)
  )

# Handle missing values using na.locf and na.approx
progression_rates <- progression_rates %>%
  mutate(across(starts_with("R_"), ~ na.locf(na.locf(., fromLast = TRUE), fromLast = FALSE))) %>%
  mutate(across(starts_with("R_"), ~ na.approx(.)))

# Verify if there are any remaining NAs
if(any(is.na(progression_rates))) {
  warning("Some progression rates could not be imputed. Please check the data.")
}

# Function to apply single exponential smoothing and project progression rates
smooth_and_project <- function(rate_series) {
  fit <- ses(rate_series, h = 10)  # Project for 10 years
  return(fit$mean)
}

# Apply the function to each progression rate series
projected_progression_rates <- lapply(progression_rates[, grep("R_", colnames(progression_rates))], smooth_and_project)

# Convert the list to a data frame and inspect it
projected_progression_rates_df <- as.data.frame(projected_progression_rates)

# Correctly assign column names
if (!is.null(projected_progression_rates_df) && ncol(projected_progression_rates_df) > 0) {
  colnames(projected_progression_rates_df) <- paste0("Projected_R_", 1:ncol(projected_progression_rates_df))
}

# Load population data
population <- read_csv(
  "data/nc-est2020-agesex-res.csv",
  col_types = cols(
    SEX = col_double(),
    AGE = col_double(),
    CENSUS2010POP = col_skip(),
    ESTIMATESBASE2010 = col_skip(),
    POPESTIMATE2010 = col_double(),
    POPESTIMATE2011 = col_double(),
    POPESTIMATE2012 = col_double(),
    POPESTIMATE2013 = col_double(),
    POPESTIMATE2014 = col_double(),
    POPESTIMATE2015 = col_double(),
    POPESTIMATE2016 = col_double(),
    POPESTIMATE2017 = col_double(),
    POPESTIMATE2018 = col_double(),
    POPESTIMATE2019 = col_double(),
    POPESTIMATE2020 = col_double()
  )
)

# Filter population data to include only total population (SEX == 0)
population <- population %>% filter(SEX == 0)

# Calculate historical enrollment rates
enrollment_rates <- enrollment %>%
  left_join(population, by = c("Year" = "AGE")) %>%
  mutate(
    RN = Prekindergarten / POPESTIMATE2020,
    RK = Kindergarten / POPESTIMATE2020,
    RG_1 = First_grade / lag(POPESTIMATE2020),
    RE = Elementary_ungraded / sum(POPESTIMATE2020[5:13]),
    RS = Secondary_ungraded / sum(POPESTIMATE2020[14:17])
  )

# Apply the single exponential smoothing function to each enrollment rate series
projected_enrollment_rates <- lapply(enrollment_rates[, grep("R_", colnames(enrollment_rates))], smooth_and_project)

# Convert the list to a data frame and check for correctness
projected_enrollment_rates_df <- as.data.frame(projected_enrollment_rates)
if (!is.null(projected_enrollment_rates_df) && ncol(projected_enrollment_rates_df) > 0) {
  colnames(projected_enrollment_rates_df) <- paste0("Projected_", colnames(projected_enrollment_rates_df))
}

# Initialize projections with the last year of actual data
last_year_enrollment <- enrollment %>% filter(Year == max(Year))

# Function to project enrollment for each grade
project_enrollment <- function(prev_year_enrollment, progression_rate) {
  return(prev_year_enrollment * progression_rate)
}

# Initialize a list to store enrollment projections
enrollment_projections <- list()

# Correctly map column names to avoid off-by-one errors
grade_columns <- c(
  "Kindergarten",
  "First_grade",
  "Second_grade",
  "Third_grade",
  "Fourth_grade",
  "Fifth_grade",
  "Sixth_grade",
  "Seventh_grade",
  "Eighth_grade",
  "Ninth_grade",
  "Tenth_grade",
  "Eleventh_grade",
  "Twelfth_grade"
)

# Project enrollments for grades 2 through 12 using correct column names
for (year in 1:10) {
  projected_year <- max(enrollment$Year) + year
  new_row <- data.frame(Year = projected_year, matrix(NA, ncol = length(grade_columns) + 2, nrow = 1))
  colnames(new_row)[-1] <- c(grade_columns, "Elementary_ungraded", "Secondary_ungraded")
  
  for (grade in 2:12) {
    previous_grade <- grade_columns[grade]
    current_grade <- grade_columns[grade + 1]
    progression_rate <- projected_progression_rates_df[[paste0("Projected_R_", grade)]][year]
    
    # Check if progression_rate is valid
    if (length(progression_rate) == 0 || is.na(progression_rate)) {
      progression_rate <- 1  # Set default progression rate if missing or invalid
    }

    new_row[[current_grade]] <- project_enrollment(last_year_enrollment[[previous_grade]], progression_rate)
  }

  # Copy ungraded enrollments
  new_row$Elementary_ungraded <- last_year_enrollment$Elementary_ungraded
  new_row$Secondary_ungraded <- last_year_enrollment$Secondary_ungraded
  
  enrollment_projections[[year]] <- new_row
  last_year_enrollment <- new_row
}

# Combine all projected enrollments into a single data frame
projected_enrollments_df <- do.call(rbind, enrollment_projections)

# Calculate total enrollments
projected_enrollments_df <- projected_enrollments_df %>%
  mutate(
    Total_Elementary = rowSums(.[, grep("First_grade|Second_grade|Third_grade|Fourth_grade|Fifth_grade|Sixth_grade|Seventh_grade|Eighth_grade", colnames(.))], na.rm = TRUE) + Elementary_ungraded,
    Total_Secondary = rowSums(.[, grep("Ninth_grade|Tenth_grade|Eleventh_grade|Twelfth_grade", colnames(.))], na.rm = TRUE) + Secondary_ungraded
  )
```
```{r}
# Calculate Total Enrollment if it's not already calculated
projected_enrollments_df <- projected_enrollments_df %>%
  mutate(Total_Enrollment = Total_Elementary + Total_Secondary)

# Prepare the data for plotting
enrollment_data <- projected_enrollments_df %>%
  pivot_longer(
    cols = c("Total_Elementary", "Total_Secondary", "Total_Enrollment"),  # Include it now that it's calculated
    names_to = "Category",
    values_to = "Enrollment"
  ) %>%
  mutate(
    Category = case_when(
      Category == "Total_Elementary" ~ "PK-Grade 8",
      Category == "Total_Secondary" ~ "Grades 9-12",
      Category == "Total_Enrollment" ~ "Total"
    ),
    Year = as.numeric(Year)
  )

# Adjust categories if your data structure differs
enrollment_data$Category <- factor(enrollment_data$Category, levels = c("PK-Grade 8", "Grades 9-12", "Total"))

# Create the line plot
enrollment_plot <- ggplot(enrollment_data, aes(x = Year, y = Enrollment, color = Category)) +
  geom_line() +
  geom_vline(xintercept = 2021.5, linetype = "solid", color = "gray50") +
  annotate("text", x = 2016, y = max(enrollment_data$Enrollment) * 0.9, label = "Actual", size = 4) +
  annotate("text", x = 2026, y = max(enrollment_data$Enrollment) * 0.9, label = "Projected", size = 4) +
  scale_color_manual(
    values = c("PK-Grade 8" = "#E69F00", "Grades 9-12" = "#56B4E9", "Total" = "#009E73"),
    breaks = c("PK-Grade 8", "Grades 9-12", "Total")
  ) +
  scale_y_continuous(labels = function(x) format(x, big.mark = ",", scientific = FALSE)) +
  labs(
    title = "Enrollment in public elementary and secondary schools, by level",
    x = "Year",
    y = "Enrollment (in thousands)"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5),
    legend.title = element_blank(),
    legend.position = "bottom"
  )

# Print the plot
print(enrollment_plot)
```
```{r}
# If you want to save the projected enrollments to a CSV file
# write_csv(projected_enrollments_df, "projected_enrollments.csv")
```

Accurate enrollment projections in elementary and secondary institutions are crucial for several reasons:

1.  Budgeting and resource allocation: Enrollment projections help school districts plan their budgets effectively. By estimating the number of students expected to attend, districts can allocate resources appropriately, ensuring they have enough teachers, classrooms, and educational materials to meet the demand.

2.  Short-term and long-term planning: Enrollment projections inform both short-term and long-term decision-making. In the short term, they help determine staffing needs and budgeting for specific programs. In the long term, they assist in planning for capital projects, such as building new schools or expanding existing facilities.

3.  Public trust and support: Accurate enrollment projections can demonstrate the need for capital projects to the public, potentially influencing the outcome of school bond referenda. When the community understands the necessity of these projects based on reliable data, they are more likely to support them.

4.  Improved forecasting accuracy: Larger schools or charter management organizations (CMOs) tend to have more accurate enrollment forecasts. With a larger student body, the impact of individual student withdrawals or last-minute changes is less significant. Additionally, larger organizations have more resources for dedicated forecasting and planning functions.

5.  Financial stability: For charter schools, enrollment directly determines their revenue, as public funding is awarded on a per-pupil basis. Accurate enrollment projections are essential for charter schools to make informed financial decisions, such as hiring teachers and staff, to maintain the required teacher-student ratios.

6.  Organizational decision-making: Enrollment forecasts are particularly sensitive for small charter schools, as adding or removing staff based on these projections can have a significant impact on their operations. Accurate projections help these schools make critical organizational decisions with confidence.

Accurate enrollment projections are vital for effective budgeting, resource allocation, short-term and long-term planning, maintaining public trust, ensuring financial stability, and informed decision-making in elementary and secondary institutions. With that said, many institutions lack a reliable means by which to make long-range enrollment forecasts. I'm here to help.

## How to Project Enrollment

### Projection Techniques

There are several key methods that can be used for projecting student enrollment in elementary and secondary institutions such as ratio-based methods, regression-based methods, the dwelling unit multiplier method, and the extended demographic model. After some research and experimentation, I elected to use an exponential smoothing technique.

#### Exponential Smoothing

Single exponential smoothing is a forecasting method suited for data that is relatively stable over time, where future values are expected to be around the same central value as observed historically, without significant shifts up or down. In developing projections of elementary and secondary enrollments, for example, the rate at which students progress from one particular grade to the next (e.g., from grade 2 to grade 3) can be projected using single exponential smoothing. Thus, this percentage is assumed to be constant over the forecast period.

Generally, exponential smoothing places more weight on recent observations than on earlier ones. The weights for observations decrease exponentially as one moves further into the past. As a result, the older data have less influence on the projections. The rate at which the weights of older observations decrease is determined by the smoothing constant.

When using single exponential smoothing for a time series, $P_t$, a smoothed series, $P$, is computed recursively by evaluating where $$\hat{P}_t = \alpha~P_t + (1 - \alpha) P_{t-1}$$$0 < \alpha \leq 1$ is the smoothing constant.

By repeated substitution, we can rewrite the equation as $$
P_t = \alpha \sum_{s=0}^{t-1} (1 - \alpha)^s P_{t-s}$$where time, $s$, goes from the first period in the time series, $0$, to time period $t-1$. The forecasts are constant for all years in the forecast period. The constant equals $$\hat{P}_{T+k} = \hat{P}_t$$where $t$ is the last year of actual data and $k$ is the $k^{th}$ year in the forecast period where $k > 0$.

These equations illustrate that the projection is a weighted average based on exponentially decreasing weights. For higher smoothing constants, weights for earlier observations decrease more rapidly than for lower smoothing constants.

### Approach Overview

I utilized the *grade progression rate method* to project grades 2 through 12. With this approach, a rate of progression from each grade (1 through 11) to the next grade (2 through 12) was projected using single exponential smoothing. For example, the rate of progression from grade 2 to grade 3 is the current year’s grade 3 enrollment expressed as a percentage of the previous year’s grade 2 enrollment. To calculate enrollment for each year in the forecast period, the progression rate for each grade was applied to the previous year’s enrollment in the previous grade.

I also utilized the *enrollment rate method* to project prekindergarten, kindergarten, and first-grade enrollments as well as elementary and secondary ungraded enrollments. In this method, an enrollment rate for each grade (or ungraded level) was projected using single exponential smoothing. For example, the enrollment rate for grade 1 is the number of students enrolled in grade 1 divided by the number of 6-year-old children. To calculate enrollment for each year in the forecast period, the enrollment rate for each category was applied to the projected population in the appropriate age group.

#### Assumptions Underlying This Approach

The grade progression rate method assumes that past trends affecting public and private elementary and secondary school enrollments will continue over the forecast period. This assumption implies that all factors influencing enrollments will display future patterns consistent with past patterns. This method implicitly includes the net effect of such factors as migration, dropouts, deaths, non-promotion, and transfers between public and private schools.

### Procedures and Equations

The notation and equations that follow describe the basic procedures used to project elementary and secondary enrollments in each of the three elementary and secondary enrollment projection models.

Let:

$i$ = Subscript denoting age\
$j$ = Subscript denoting grade\
$t$ = Subscript denoting time\
$T$ = Subscript of the first year in the forecast period\
$N_t$ = Enrollment at the prekindergarten (nursery) level\
$K_t$ = Enrollment at the kindergarten level\
$G_{j,t}$ = Enrollment\
$E_t$ = Enrollment in elementary ungraded programs\
$S_t$ = Enrollment in secondary ungraded programs\
$P_{i,t}$ = Population\
$R_{j,t}$ = Progression rate\
$RN_t$ = Enrollment rate for prekindergarten (nursery school)\
$RK_t$ = Enrollment rate for kindergarten\
$RG_{1,t}$ = Enrollment rate for grade 1\
$RE_t$ = Enrollment rate for elementary ungraded programs\
$RS_t$ = Enrollment rate for secondary ungraded programs.

***Step 1***. *Calculate historical grade progression rates for each of grade*. The first step in projecting the enrollments using the grade progression method was to calculate, for each grade, a progression rate for each year of actual data used to produce the projections except for the first year. The progression rate for grade $j$ in year $t$ equals $$R_{j,t} = \frac{G_{j,t}}{G_{j-1,t-1}}$$***Step 2***. *Produce a projected progression rate for each of grades 2 through 12*. Projections for each grade’s progression rate were then produced for the forecast period using single exponential smoothing. A separate smoothing constant, chosen to minimize the sum of squared forecast errors, was used to calculate the projected progression rate for each grade. Single exponential smoothing produces a single forecast for all years in the forecast period. Therefore, for each grade $j$, the projected progression rate, $\hat{R}_j$, is the same for each year in the forecast period.

***Step 3***. *Calculate enrollment projections for each of grades 2 through 12*. For the first year in the forecast period, $T$, enrollment projections, $\hat{G}_{j,T}$, for grades 2 though 12 were produced using the projected progression rates and enrollments of grades 1 though 11 from the last year of actual data, $T–1$. Specifically, $$\hat{G}_{j,T} = \hat{R}_j \cdot \hat{G}_{j-1, T-1}$$This same procedure was then used to produce the projections for the following year, $T+1$, except that enrollment projections for year $T$ were used rather than actual numbers: $$\hat{G}_{j,T+1} = \hat{R}_j \cdot \hat{G}_{j,T}$$ The enrollment projections for grades 2 through 11 for year $T$ were those just produced using the grade progression method. The projection for grade 1 for year $T$ was produced using the enrollment rate method as outlined in steps 4, 5, and 6 below.

The same procedure was used for the remaining years in the projections period.

***Step 4***. *Calculate historical enrollment rates for prekindergarten, kindergarten, grade 1, elementary ungraded, and secondary ungraded.* The first step in projecting prekindergarten, kindergarten, first-grade, elementary ungraded, and secondary ungraded enrollments using the enrollment rate method was to calculate enrollment rates for each enrollment category for the last year of actual data, $T–1$, where: $$RN_t = \frac{N_t}{P_{5,t}}$$ $$RK_t = \frac{K_t}{P_{5,t}}$$ $$RG_{1,t} = \frac{G_{1,t}} {P_{6,t}}$$ $$RE_t = \frac{E_t}{\sum_{i=5}^{13}P_{i,t}}$$ $$RS_t = \frac{S_t}{\sum_{i=14}^{17}P_{i,t}}$$ ***Step 5***. **Produce a projected enrollment rate for prekindergarten, kindergarten, grade 1, elementary ungraded, and secondary ungraded**. Projections for each category’s enrollment rate were produced for the forecast period using single exponential smoothing. A separate smoothing constant, chosen to minimize the sum of squared forecast errors, was used to calculate the projected enrollment rate for each of these grades (or ungraded levels), specifically for prekindergarten, kindergarten, grade 1, elementary ungraded, and secondary ungraded. Single exponential smoothing produces a single forecast for all years in the forecast period. These enrollment rates were then used as the projected enrollment rates for each year in the forecast period ($\hat{RN}$, $\hat{RK}$, $\hat{RG}_1$, $\hat{RE}$, and $\hat{RS}$). ***Step 6**.* Calculate enrollment projections for prekindergarten through grad 1 and the ungraded categories*. For each year in the forecast period, the enrollment rates were then multiplied by the appropriate population projections (*$\hat{P_{i,t}}$) to calculate enrollment projections for prekindergarten ($\hat{N_t}$), kindergarten ($\hat{K_t}$), first grade ($\hat{G}_{1,t}$), elementary ungraded ($\hat{E}_t$), and secondary ungraded ($\hat{S}_t$).$$\hat{N}_t = \hat{RN} \cdot \hat{P}_{5,t}$$ $$\hat{K}_t = \hat{RK} \cdot \hat{P}_{5,t}$$ $$\hat{G}_{1,t} = \hat{RG}_1 \cdot \hat{P}_{6,t}$$ $$\hat{E}_t = \hat{RE} \cdot \sum_{i=5}^{13}\hat{P}_{i,t}$$ $$\hat{S}_t = \hat{RS} \cdot \sum_{i=14}^{17}\hat{P}_{i,t}$$ ***Step 7***.* Calculate total elementary and secondary enrollments by summing the projections for each grade and the ungraded categories\*. To obtain projections of total enrollment, projections of enrollments for the individual grades, elementary ungraded, and secondary ungraded were summed.

## Tools Utilized

There are numerous tools to select from when tackling an exercise like this. Instead of delving into the varous options, I decided to simply tell you what I used:

-   [Microsoft Excel](https://www.microsoft.com/en-us/microsoft-365/excel)
-   [Posit RStudio Desktop](https://posit.co/products/open-source/rstudio/)[^1]
    -   This required an installation of [R, the programming language](https://cran.rstudio.com/).

[^1]: RStudio Desktop is a standalone opensource application that does not store information on the internet. RStudio Desktop ***Pro***, on the other hand, can or does. I'm not sure. If this is a concern for you, speak with Posit. They were very helpful helping the Florida UFSD determine whether their software is EdLaw 2-d compliant, which is always a concern when vetting new applications.

## Process Overview

The process for forecasting student enrollment by grade level and total enrollment using historical data begins by viewing the enrollment data in Excel and making some minor adjustments before loading it into RStudio and preparing the data by renaming columns and calculating the total enrollment. A custom forecasting function is defined using the AAN (Additive error, Additive trend, No seasonality) exponential smoothing model from the `forecast` package. The forecasting function is then applied to each grade level and the total enrollment to generate predictions for the years 2022 to 2030. The forecasted values are stored in a list and subsequently used to create a forecast table. Finally, the code visualizes the forecasts by creating a grid of plots, with each plot representing the forecasted enrollment for a specific grade level or the total enrollment.

### Data Used

For this exercise, I utilized data from the [NCES's Digest of Education Statistics' Enrollment in public elementary and secondary schools, by level and grade: Selected years, fall 1980 through fall 2031](https://nces.ed.gov/programs/digest/d23/tables/dt23_203.10.asp). The dataset covers annual data from 1990 to 2021. it also includes data from 1980, 1985, and projections from 2022 through 2031 which I chose to ignore.

I also utilized data from the [United States Census Bureau's Annual Estimates of the Resident Population by Single Year of Age and Sex for the United States: April 1, 2010 to July 1, 2020](https://www.census.gov/programs-surveys/popest/technical-documentation/research/evaluation-estimates/2020-evaluation-estimates/2010s-national-detail.html). This dataset provides detailed population estimates for the United States by single year of age, sex, and year from 2010 to 2020.

### Data Loading and Preparation

To use the data, I initially had to modify the spreadsheet in Excel. First, I un-merged cells A3:A4 and B3:B4. Then, I deleted row 5. After the data was in a usable state, I moved the project to RStudio.

Once in RStudio, I loaded the packages I used: - `readxl` for reading Excel files and - `forecast` for time series forecasting. I used the `read_excel()` function from the `readxl` package to load data from the Excel file. Then, I used the `colnames()` function to rename the columns of the loaded data frame (`enrollment`) with more descriptive names. I also created a new column named "enrollment_total" to the `enrollment` data frame, which was calculated as the row-wise sum of all columns except the first one (assuming the first column is not numeric). The `na.rm = TRUE` argument was used to handle any missing values.

::: {.callout-note title="Click here to view the code I used." collapse="true"}
```{r}
#| eval: false

# Load packages
library(readxl)
library(forecast)

# Load data
enrollment <- read_excel(
  "tabn203.10.xlsx",
  sheet = "Digest 2022 Table 203.10",
  range = "A4:U38",
  col_types = c(
    "text",
    "skip",
    "skip",
    "numeric",
    "skip",
    "numeric",
    "numeric",
    "numeric",
    "numeric",
    "numeric",
    "numeric",
    "numeric",
    "numeric",
    "numeric",
    "numeric",
    "skip",
    "numeric",
    "numeric",
    "numeric",
    "numeric",
    "numeric"
  )
)

# Rename columns
colnames(enrollment) <-
  c(
    "Year",
    "Prekindergarten",
    "Kindergarten",
    "First_grade",
    "Second_grade",
    "Third_grade",
    "Fourth_grade",
    "Fifth_grade",
    "Sixth_grade",
    "Seventh_grade",
    "Eighth_grade",
    "Elementary_ungraded",
    "Ninth_grade",
    "Tenth_grade",
    "Eleventh_grade",
    "Twelfth_grade",
    "Secondary_ungraded"
  )

# Calculate prekindergarten through eighth-grade enrollment
enrollment$pk_8_enrollment <-
  rowSums(enrollment[, c(
    "Prekindergarten",
    "Kindergarten",
    "First_grade",
    "Second_grade",
    "Third_grade",
    "Fourth_grade",
    "Fifth_grade",
    "Sixth_grade",
    "Seventh_grade",
    "Eighth_grade",
    "Elementary_ungraded"
  )], na.rm = TRUE)

# Calculate grades nine through twelve enrollment
enrollment$grades_9_12_enrollment <-
  rowSums(enrollment[, c(
    "Ninth_grade",
    "Tenth_grade",
    "Eleventh_grade",
    "Twelfth_grade",
    "Secondary_ungraded"
  )], na.rm = TRUE)

# Calculate total enrollment
enrollment$enrollment_total <-
  rowSums(enrollment[, c("pk_8_enrollment", "grades_9_12_enrollment")], na.rm = TRUE)
```
:::

### Forecasting Functions

I defined a custom function named `forecast_grade_level()` to forecast enrollment for a specific grade level. This function takes a grade level as input and performs the following steps: 1. Prepares the time series data using the `ts()` function, specifying the start and end years and the frequency (1 for annual data). 2. Specifies and fits an AAN (Additive error, Additive trend, No seasonality) exponential smoothing model using the `ets()` function from the `forecast` package. 3. Makes predictions for the years 2022 to 2030 using the `forecast()` function. 4. Returns a list containing the forecasted means and the complete forecast object.

::: {.callout-note title="Click here to view the code I used." collapse="true"}
```{r}
#| eval: false

# Function to forecast enrollment for a specific grade level or enrollment category
forecast_enrollment <- function(enrollment_category) {
  # Prepare the time series data
  enrollment_ts <-
    ts(enrollment[[enrollment_category]],
       start = 1990,
       end = 2021,
       frequency = 1)
  
  # Specify and fit the AAN exponential smoothing model
  enrollment_model <- ets(enrollment_ts, model = "AAN")
  
  # Make predictions for 2022 to 2030
  enrollment_forecast <- forecast(enrollment_model, h = 9)
  
  # Return the forecast
  return(list(mean = enrollment_forecast$mean, forecast = enrollment_forecast))
}
```
:::

### Forecasting Enrollment

I created a vector named `grade_levels`, containing the names of all grade levels and the enrollment total. I used the `lapply()` function to apply the `forecast_grade_level()` function to each grade level in the `grade_levels` vector. The resulting list of forecasts was stored in the `forecasts` variable.

::: {.callout-note title="Click here to view the code I used." collapse="true"}
```{r}
#| eval: false

# Forecast enrollment for each grade level
grade_levels <-
  c(
    "Prekindergarten",
    "Kindergarten",
    "First_grade",
    "Second_grade",
    "Third_grade",
    "Fourth_grade",
    "Fifth_grade",
    "Sixth_grade",
    "Seventh_grade",
    "Eighth_grade",
    "Elementary_ungraded",
    "Ninth_grade",
    "Tenth_grade",
    "Eleventh_grade",
    "Twelfth_grade",
    "Secondary_ungraded"
  )

forecasts_grade_levels <- lapply(grade_levels, forecast_enrollment)
```
:::

### Forecast Table

I created a new data frame named `forecast_table_grade_levels` using the `data.frame()` function. It combines the forecasted means for each grade level and the enrollment total, with the years 2022 to 2030 as the first column. The column names of `forecast_table` are then updated to match the grade levels. The `print()` function was used to display the `forecast_table` in the console.

::: {.callout-note title="Click here to view the code I used." collapse="true"}
```{r}
#| eval: false

library(gt)

# Create a data frame with the forecasts for grade levels
forecast_table_df <-
  data.frame(cbind(Year = 2022:2030, do.call(
    cbind, lapply(forecasts_grade_levels, function(x)
      x$mean)
  )))

# Assign grade levels to column names
colnames(forecast_table_df)[-1] <- grade_levels

# Create the gt table
forecast_table <- gt(forecast_table_df)

# Change the column names
forecast_table <-
  cols_label(
    forecast_table,
    First_grade = "First Grade",
    Second_grade = "Second Grade",
    Third_grade = "Third Grade",
    Fourth_grade = "Fourth Grade",
    Fifth_grade = "Fifth Grade",
    Sixth_grade = "Sixth Grade",
    Seventh_grade = "Seventh Grade",
    Eighth_grade = "Eighth Grade",
    Ninth_grade = "Ninth Grade",
    Tenth_grade = "Tenth Grade",
    Eleventh_grade = "Eleventh Grade",
    Twelfth_grade = "Twelfth Grade"
  )

# Add a table header
forecast_table <-
  tab_header(forecast_table, title = "Enrollment in public elementary and secondary schools, by grade")

# Display the table
forecast_table
```
:::

```{r}
#| echo: false
#| message: false

library(gt)

# Create a data frame with the forecasts for grade levels
forecast_table_df <-
  data.frame(cbind(Year = 2022:2030, do.call(
    cbind, lapply(forecasts_grade_levels, function(x)
      x$mean)
  )))

# Assign grade levels to column names
colnames(forecast_table_df)[-1] <- grade_levels

# Create the first table
elementary_table_df <- forecast_table_df[, c("Year", "Prekindergarten", "Kindergarten", "First_grade", "Second_grade", "Third_grade", "Fourth_grade", "Fifth_grade")]

# Create the gt table for the first table
elementary_table <- gt(elementary_table_df)

# Change the column names
elementary_table <-
  cols_label(
    elementary_table,
    First_grade = "First Grade",
    Second_grade = "Second Grade",
    Third_grade = "Third Grade",
    Fourth_grade = "Fourth Grade",
    Fifth_grade = "Fifth Grade"
  )

# Add a table header to the first table
elementary_table <- tab_header(elementary_table, title = "Enrollment in public elementary schools, by grade (Prekindergarten to Fifth Grade)")

# Display the first table
elementary_table
```

```{r}
#| echo: false

# Create the second table
secondary_table_df <- forecast_table_df[, c("Year", "Sixth_grade", "Seventh_grade", "Eighth_grade", "Ninth_grade", "Tenth_grade", "Eleventh_grade", "Twelfth_grade")]

# Create the gt table for the second table
secondary_table <- gt(secondary_table_df)

# Change the column names
secondary_table <-
  cols_label(
    secondary_table,
    Sixth_grade = "Sixth Grade",
    Seventh_grade = "Seventh Grade",
    Eighth_grade = "Eighth Grade",
    Ninth_grade = "Ninth Grade",
    Tenth_grade = "Tenth Grade",
    Eleventh_grade = "Eleventh Grade",
    Twelfth_grade = "Twelfth Grade"
  )

# Add a table header to the second table
secondary_table <- tab_header(secondary_table, title = "Enrollment in public secondary schools, by grade (Sixth to Twelfth Grade)")

# Display the second table
secondary_table
```

### Visualization

I used the `par()` function to adjust the plot margins for better visualization. A loop was initiated to plot the forecasts for each grade level and the enrollment total. The `plot()` function was used to create a separate plot for each forecast, with the grade level as the plot title. The `par(mfrow = c(5, 4))` function was used to arrange the plots in a 5x4 grid layout.

::: {.callout-note title="Click here to view the code I used." collapse="true"}
```{r}
#| eval: false

# Adjust plot margins for grade level plots
par(mar = c(2, 2, 2, 1))

# Plot the forecasts for grade levels
par(mfrow = c(4, 4))
for (i in 1:length(forecast_table_df)) {
  plot(
    forecast_table_df[[i]]$forecast,
    main = paste("Enrollment Forecast (2022-2030) -", grade_levels[i])
  )
}
```
:::

```{r}
#| echo: false

# Adjust plot margins for grade level plots
par(mar = c(2, 2, 2, 1))

# Plot the forecasts for grade levels
par(mfrow = c(4, 4))
par(mfrow = c(4, 4))
for (i in 1:length(forecasts_grade_levels)) {
  plot(
    forecasts_grade_levels[[i]]$forecast,
    main = paste("Enrollment Forecast (2022-2030) -", grade_levels[i])
  )
}
```

## Conclusion
